export default class App {
    constructor() {
        this.users = [];
        this.tasks = {};  // –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: { userName: [task1, task2] }
        this.currentUser = null;

        // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.userNameInput = document.getElementById('userNameInput');
        this.currentUserSelect = document.getElementById('currentUserSelect');
        this.userMessage = document.getElementById('userMessage');

        this.taskForm = document.getElementById('taskForm');
        this.taskContent = document.getElementById('taskContent');
        this.taskPriority = document.getElementById('taskPriority');
        this.taskCategory = document.getElementById('taskCategory');
        this.taskMessage = document.getElementById('taskMessage');
        this.taskList = document.getElementById('taskList');

        this.statusFilter = document.getElementById('statusFilter');
        this.priorityFilter = document.getElementById('priorityFilter');
        this.categoryFilter = document.getElementById('categoryFilter');
        this.sortBy = document.getElementById('sortBy');
        this.searchInput = document.getElementById('searchInput');

        this.init();
    }

    init() {
        this.renderUserOptions();

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ñ–æ—Ä–º–µ
        this.taskForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.addTask();
        });

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        [this.statusFilter, this.priorityFilter, this.categoryFilter, this.sortBy, this.searchInput].forEach(el => {
            el.addEventListener('change', () => this.renderTasks());
            el.addEventListener('input', () => this.renderTasks());
        });

        // –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        this.currentUserSelect.onchange = () => {
            this.currentUser = this.currentUserSelect.value || null;
            this.renderTasks();
        }
    }

    addUser(name) {
        const userName = this.userNameInput.value.trim();
        if (!userName) {
            this.showMessage(this.userMessage, 'Podaj nazwƒô u≈ºytkownika.', 'error');
            return;
        }

        if (this.users.includes(userName)) {
            this.showMessage(this.userMessage, 'U≈ºytkownik ju≈º istnieje.', 'error');
            return;
        }

        this.users.push(userName);
        this.tasks[userName] = [];  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
        this.currentUser = userName;
        this.renderUserOptions();
        this.userNameInput.value = '';
        this.showMessage(this.userMessage, `Dodano u≈ºytkownika: ${userName}`, 'success');
        this.renderTasks();
    }

    removeUser() {
        if (!this.currentUser) {
            this.showMessage(this.userMessage, 'Wybierz u≈ºytkownika do usuniƒôcia.', 'error');
            return;
        }

        this.users = this.users.filter(user => user !== this.currentUser);
        delete this.tasks[this.currentUser];
        this.currentUser = null;
        this.renderUserOptions();
        this.showMessage(this.userMessage, 'U≈ºytkownik zosta≈Ç usuniƒôty.', 'success');
        this.renderTasks();
    }

    addTask() {
        if (!this.currentUser) {
            this.showMessage(this.taskMessage, 'Wybierz u≈ºytkownika przed dodaniem zadania.', 'error');
            return;
        }

        const content = this.taskContent.value.trim();
        if (!content) {
            this.showMessage(this.taskMessage, 'Tre≈õƒá zadania nie mo≈ºe byƒá pusta.', 'error');
            return;
        }

        const priority = this.taskPriority.value;
        const category = this.taskCategory.value;

        const newTask = {
            id: Date.now(),
            content,
            priority,
            category,
            status: 'pending',  // —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –æ–∂–∏–¥–∞–µ—Ç
            createdAt: new Date()
        };

        this.tasks[this.currentUser].push(newTask);
        this.taskForm.reset();
        this.showMessage(this.taskMessage, 'Zadanie zosta≈Ço dodane.', 'success');
        this.renderTasks();
    }

    renderUserOptions() {
        this.currentUserSelect.innerHTML = '<option value="">Wybierz u≈ºytkownika</option>';
        this.users.forEach(user => {
            const option = document.createElement('option');
            option.value = user;
            option.textContent = user;
            if (user === this.currentUser) {
                option.selected = true;
            }
            this.currentUserSelect.appendChild(option);
        });
    }

    renderTasks() {
        if (!this.currentUser) {
            this.taskList.innerHTML = '<p class="no-tasks">Wybierz u≈ºytkownika, aby zobaczyƒá jego zadania.</p>';
            return;
        }

        let tasks = this.tasks[this.currentUser] || [];

        // –§–∏–ª—å—Ç—Ä—ã
        const statusFilter = this.statusFilter.value;
        const priorityFilter = this.priorityFilter.value;
        const categoryFilter = this.categoryFilter.value;
        const sortBy = this.sortBy.value;
        const search = this.searchInput.value.toLowerCase();

        if (statusFilter !== 'all') {
            tasks = tasks.filter(task => task.status === statusFilter);
        }

        if (priorityFilter !== 'all') {
            tasks = tasks.filter(task => task.priority === priorityFilter);
        }

        if (categoryFilter !== 'all') {
            tasks = tasks.filter(task => task.category === categoryFilter);
        }

        if (search) {
            tasks = tasks.filter(task => task.content.toLowerCase().includes(search));
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if (sortBy === 'date') {
            tasks.sort((a, b) => b.createdAt - a.createdAt);
        } else if (sortBy === 'priority') {
            const priorityOrder = { high: 3, medium: 2, low: 1 };
            tasks.sort((a, b) => priorityOrder[b.priority] - priorityOrder[a.priority]);
        } else if (sortBy === 'category') {
            tasks.sort((a, b) => a.category.localeCompare(b.category));
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (tasks.length === 0) {
            this.taskList.innerHTML = '<p class="no-tasks">Brak zada≈Ñ do wy≈õwietlenia.</p>';
            return;
        }

        this.taskList.innerHTML = '';
        tasks.forEach(task => {
            const card = document.createElement('div');
            card.className = 'task-card' + (task.status === 'done' ? ' done' : '');

            card.innerHTML = `
                <div class="task-header">
                    <div class="task-meta">
                        <span class="priority-badge priority-${task.priority}">${task.priority.toUpperCase()}</span>
                        <span class="category-badge">${task.category}</span>
                        <span class="status-badge ${task.status}">${task.status === 'done' ? 'Uko≈Ñczone' : 'OczekujƒÖce'}</span>
                    </div>
                    <button class="btn btn-small btn-danger" title="Usu≈Ñ zadanie">üóëÔ∏è</button>
                </div>
                <div class="task-content">
                    <h3>${task.content}</h3>
                </div>
                <div class="task-date">${task.createdAt.toLocaleString()}</div>
                <div class="task-actions">
                    <button class="btn btn-small btn${task.status === 'done' ? '' : ' btn-success'}">
                        ${task.status === 'done' ? 'Oznacz jako oczekujƒÖce' : 'Oznacz jako uko≈Ñczone'}
                    </button>
                </div>
            `;

            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
            card.querySelector('.btn-danger').onclick = () => {
                this.tasks[this.currentUser] = this.tasks[this.currentUser].filter(t => t.id !== task.id);
                this.renderTasks();
            };

            // –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            card.querySelector('.task-actions button').onclick = () => {
                task.status = task.status === 'done' ? 'pending' : 'done';
                this.renderTasks();
            };

            this.taskList.appendChild(card);
        });
    }

    showMessage(container, message, type = 'info') {
        container.innerHTML = `
            <div class="${type === 'error' ? 'error-message' : 'success-message'}">
                ${message}
            </div>
        `;
        setTimeout(() => (container.innerHTML = ''), 3000);
    }
}
